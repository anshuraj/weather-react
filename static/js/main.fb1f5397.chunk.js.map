{"version":3,"sources":["components/About.js","components/WeatherForm.js","components/WeatherDisplay.js","components/Spinner.js","components/Weather.js","App.js","sw.js","index.js"],"names":["About","className","href","WeatherForm","onNewLocation","useState","location","setLocation","onSubmit","e","preventDefault","length","city","type","value","onChange","target","placeholder","WeatherDisplay","data","name","main","temp","weather","description","feels_like","temp_min","temp_max","humidity","clouds","all","wind","deg","speed","visibility","Spinner","Weather","setData","isLoading","setIsLoading","handleNewLocation","lat","lon","requestUrl","console","log","fetch","then","response","ok","Error","statusText","json","error","alert","message","catch","err","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","hasOwnProperty","defaultProps","App","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fb1f5397.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n  return (\n    <div className=\"bottom\">\n      A weather app developed by{' '}\n      <a href=\"https://anshuraj.github.io\">Anshu Raj</a>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction WeatherForm({ onNewLocation }) {\n  const [location, setLocation] = useState('');\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    setLocation('');\n\n    if (location.length > 0) onNewLocation({ city: location });\n  };\n\n  const handleChange = (e) => {\n    const location = e.target.value;\n    setLocation(location);\n  };\n  return (\n    <div>\n      <h3 className=\"text-center\">Weather</h3>\n      <form onSubmit={onFormSubmit}>\n        <input\n          type=\"text\"\n          value={location}\n          onChange={handleChange}\n          placeholder=\"Enter a location\"\n        />\n        <button className=\"hollow button expanded\">Get weather</button>\n      </form>\n    </div>\n  );\n}\n\nWeatherForm.propTypes = {\n  onNewLocation: PropTypes.func.isRequired,\n};\n\nexport default WeatherForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction WeatherDisplay({ data }) {\n  return (\n    <div>\n      <h4>{data.name}</h4>\n      <div className=\"row\">\n        <div className=\"small-6 columns\">\n          <div>\n            <span className=\"temperature\">{data.main.temp}</span>{' '}\n            <span className=\"deg\">&deg;C</span>\n          </div>\n          <div>{data.weather[0].description}</div>\n          <div>Feels like {data.main.feels_like} &deg;C</div>\n          <div>Min: {data.main.temp_min}&deg;C</div>\n          <div>Max: {data.main.temp_max}&deg;C</div>\n        </div>\n      </div>\n      <br />\n      <div>Humidity {data.main.humidity}% </div>\n      <div>Clouds {data.clouds.all}% </div>\n      <div>\n        Wind {data.wind.deg}&deg; {data.wind.speed} m/s{' '}\n      </div>\n      <div>Visibility {data.visibility} km </div>\n    </div>\n  );\n}\n\nWeatherDisplay.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default WeatherDisplay;\n","import React from 'react';\nimport '../css/Spinner.css';\n\n/**\n * Loading component\n * Renders a loading spinner\n */\nfunction Spinner() {\n  return (\n    <div className=\"spinner\">\n      <div className=\"anim\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\n\nimport About from './About';\nimport WeatherForm from './WeatherForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport Spinner from './Spinner';\nimport '../css/Weather.css';\n\nconst WEATHER_MAP_URL =\n  'https://api.openweathermap.org/data/2.5/weather?appid=346174a5d0c90da6a254f1ca2fd936aa&units=metric';\n\nfunction Weather() {\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNewLocation = ({ city, lat, lon }) => {\n    const requestUrl = `${WEATHER_MAP_URL}${city ? `&q=${city}` : ''}${\n      lat && lon ? `&lat=${lat}&lon=${lon}` : ''\n    }`;\n    console.log(city);\n    setIsLoading(true);\n\n    fetch(requestUrl)\n      .then((response) => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        setData(response || {});\n        setIsLoading(false);\n        if (response.error) {\n          alert(response.error.message);\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        handleNewLocation({\n          lat: pos.coords.latitude,\n          lon: pos.coords.longitude,\n        });\n      });\n    }\n  }, []);\n\n  const loading = () => {\n    if (isLoading) {\n      return <Spinner />;\n    } else if (data.hasOwnProperty('main')) {\n      return <WeatherDisplay data={data} />;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"small-centered medium-6 large-5 columns card\">\n        <WeatherForm onNewLocation={handleNewLocation} />\n        {loading()}\n      </div>\n      <About />\n    </>\n  );\n}\n\nWeather.defaultProps = {\n  isLoading: false,\n};\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n  render() {\n    return (\n      <Weather />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './sw';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}