{"version":3,"sources":["components/About.js","components/WeatherForm.js","components/WeatherDisplay.js","components/Spinner.js","components/Weather.js","App.js","sw.js","index.js"],"names":["About","className","href","WeatherForm","onNewLocation","useState","location","setLocation","onSubmit","e","preventDefault","length","type","value","onChange","target","placeholder","WeatherDisplay","current","name","region","country","weather_icons","map","i","key","src","alt","weather_descriptions","w","temperature","feelslike","precip","humidity","cloudcover","wind_dir","wind_speed","visibility","observation_time","Spinner","Weather","setCurrent","isLoading","setIsLoading","handleNewLocation","encodedLocation","encodeURIComponent","requestUrl","fetch","then","response","ok","Error","statusText","json","error","alert","message","catch","err","console","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","hasOwnProperty","defaultProps","App","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bcbdd41.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n  return (\n    <div className=\"bottom\">\n      A weather app developed by{' '}\n      <a href=\"https://anshuraj.github.io\">Anshu Raj</a>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction WeatherForm({ onNewLocation }) {\n  const [location, setLocation] = useState('');\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    setLocation('');\n\n    if (location.length > 0) onNewLocation(location);\n  };\n\n  const handleChange = (e) => {\n    const location = e.target.value;\n    setLocation(location);\n  };\n  return (\n    <div>\n      <h3 className=\"text-center\">Weather</h3>\n      <form onSubmit={onFormSubmit}>\n        <input\n          type=\"text\"\n          value={location}\n          onChange={handleChange}\n          placeholder=\"Enter a location\"\n        />\n        <button className=\"hollow button expanded\">Get weather</button>\n      </form>\n    </div>\n  );\n}\n\nWeatherForm.propTypes = {\n  onNewLocation: PropTypes.func.isRequired,\n};\n\nexport default WeatherForm;\n","import React from 'react';\n\nfunction WeatherDisplay({ current, location }) {\n  return (\n    <div>\n      <h4>\n        {location.name}\n        {location.region ? ', ' + location.region : ''}, {location.country}\n      </h4>\n      <div className=\"row\">\n        {current && (\n          <div className=\"small-6 columns\">\n            <div>\n              {current.weather_icons.map((i) => (\n                <img key={i} src={i} alt=\"icon\" />\n              ))}\n            </div>\n            {current.weather_descriptions.map((w) => (\n              <div key={w}>{w}</div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"small-6 columns\">\n          <div>\n            <span className=\"temperature\">{current.temperature}</span>{' '}\n            <span className=\"deg\">&deg;C</span>\n          </div>\n          <div>Feels like {current.feelslike} &deg;C</div>\n        </div>\n      </div>\n      <br />\n      <div>Precipitation {current.precip} mm </div>\n      <div>Humidity {current.humidity}% </div>\n      <div>Clouds {current.cloudcover}% </div>\n      <div>\n        Wind {current.wind_dir} {current.wind_speed} kmph{' '}\n      </div>\n      <div>Visibility {current.visibility} km </div>\n      Last updated on {current.observation_time} <br />\n    </div>\n  );\n}\n\nexport default WeatherDisplay;\n","import React from 'react';\nimport '../css/Spinner.css';\n\n/**\n * Loading component\n * Renders a loading spinner\n */\nfunction Spinner() {\n  return (\n    <div className=\"spinner\">\n      <div className=\"anim\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\n\nimport About from './About';\nimport WeatherForm from './WeatherForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport Spinner from './Spinner';\nimport '../css/Weather.css';\n\nconst WEATHER_MAP_URL =\n  'http://api.weatherstack.com/current?access_key=733bd20110d64d7502419d9e3356db65';\n\nfunction Weather() {\n  const [current, setCurrent] = useState({});\n  const [location, setLocation] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNewLocation = (location) => {\n    const encodedLocation = encodeURIComponent(location);\n    const requestUrl = `${WEATHER_MAP_URL}&query=${encodedLocation}`;\n\n    setIsLoading(true);\n\n    fetch(requestUrl)\n      .then((response) => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((response) => {\n        setLocation(response.location || {});\n        setCurrent(response.current || {});\n        setIsLoading(false);\n        if (response.error) {\n          alert(response.error.message);\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        handleNewLocation(pos.coords.latitude + ',' + pos.coords.longitude);\n      });\n    }\n  }, []);\n\n  const loading = () => {\n    if (isLoading) {\n      return <Spinner />;\n    } else if (\n      current.hasOwnProperty('temperature') &&\n      location.hasOwnProperty('name')\n    ) {\n      return <WeatherDisplay location={location} current={current} />;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"small-centered medium-6 large-5 columns card\">\n        <WeatherForm onNewLocation={handleNewLocation} />\n        {loading()}\n      </div>\n      <About />\n    </>\n  );\n}\n\nWeather.defaultProps = {\n  isLoading: false,\n};\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n  render() {\n    return (\n      <Weather />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './sw';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}